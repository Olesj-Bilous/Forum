@using Data.Entities
@model PostViewModel
@{
    ViewBag.Title = Model.Post.Title;
    ViewBag.PostView = true;
    ViewBag.NewView = false;
    ViewBag.Message = Model.Post;
}

<div class="post">
    @* post *@
    <partial name="_Message" view-data="ViewData"/>

    <div class="post-footer">
        @* replies *@
        @foreach (var reply in Model.Replies)
        {
            <div class="mt-1">
                @{
                    await DisplayDepthFirst(reply);
                }
            </div>
        }
    </div>
</div>

@{
    // Replies are displayed depth first, with:
    // - indentation representative of depth
    // - nested divs to control collapsing of replies
    //
    // Depth-first search is implemented iteratively with a stack
    // to avoid the tail call overhead of a recursive solution
    async Task DisplayDepthFirst(Reply root)
    {
        Stack<Reply> replies = new();

        // a count of discovered yet unfinished child replies is kept for each reply
        Stack<int> childCounts = new();

        replies.Push(root);

        while (replies.Any())
        {
            var source = replies.Pop();

            // source is sent to message partial view for display
            ViewBag.Message = source;
            <div class="reply mb-1">
                <partial name="_Message" view-data="ViewData" />
            </div>
            
            var childCount = source.Replies.Count;
            if (childCount > 0)
            {
                // a count of source's children is pushed to the count stack
                childCounts.Push(childCount);

                // a container is opened for its children
                @:<div class="ms-3 mb-1">

                // the children of source are pushed to the reply stack
                @foreach (var reply in source.Replies)
                {
                    replies.Push(reply);
                }
            }
            else
            {
                if (childCounts.Any())
                {
                    // decrement parent count
                    var parentCount = childCounts.Peek() - 1;

                    // pop zero counts and decrement parent counts
                    // until we reach an ancestor count larger than zero after decrementing
                    while (parentCount < 1)
                    {
                        // pop the count
                        childCounts.Pop();

                        // close children container
                        @:</div>

                        // pass decremented grandparent count to while loop, if any, else break loop
                        if (childCounts.Any())
                            parentCount = childCounts.Peek() - 1;
                        else
                            break;
                    }
                    // pop and push back count larger than zero after decrementing, if any
                    if (childCounts.Any())
                    {
                        childCounts.Pop();
                        childCounts.Push(parentCount);
                    }
                }
            }
        }
    }
}