@using Data.Entities
@model PostViewModel
@{
    ViewBag.Title = Model.Post.Title;
    ViewBag.PostView = true;
    ViewBag.NewView = false;
    ViewBag.Message = Model.Post;
}

<div class="post">
    @* main post *@
    <partial name="_Message" view-data="ViewData"/>

    <div class="post-footer">
        @* replies *@
        @foreach (var reply in Model.Replies)
        {
            <div class="mt-1">
                @{
                    await DisplayDepthFirst(reply);
                }
            </div>
        }
    </div>
</div>

@{
    //Replies are displayed depth first, with indentation representative of depth
    //Depth-first search is implemented iteratively with a stack
    //to avoid the tail call overhead of a recursive solution
    async Task DisplayDepthFirst(Reply root)
    {
        Stack<Reply> replies = new();
        Stack<int> childCounts = new();

        replies.Push(root);

        while (replies.Any())
        {
            var source = replies.Pop();

            //margin is set according to the current depth of tree traversal,
            //which is the amount of replies with discovered children that remain to be finished, which is the amount of childCounts
            ViewBag.Message = source;
            <div class="reply mb-1" style="margin-left:@( childCounts.Count * 8 )px">
                <partial name="_Message" view-data="ViewData" />
            </div>

            //source is root at the first iteration, so there are no childCounts
            if (childCounts.Any())
            {
                //a child is removed from the count, since it was displayed earlier in the iteration
                var childCount = childCounts.Pop() - 1;

                //if it was not the last child, childCount is pushed back to the stack
                if (childCount > 0)
                {
                    childCounts.Push(childCount);
                }
            }

            if (source.Replies.Any())
            {
                //the children of source are pushed to the reply stack
                @foreach (var reply in source.Replies)
                {
                    replies.Push(reply);
                }

                //a count of source's children is pushed to the count stack
                childCounts.Push(source.Replies.Count);
            }
        }
    }
}